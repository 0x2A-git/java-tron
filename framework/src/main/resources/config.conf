  net {
    type = mainnet
    # type = testnet
    }

    storage {
    # Directory for storing persistent data
    db.version = 2,
    db.engine = "LEVELDB",
    db.directory = "database",
    index.directory = "index",

    # This configuration item is only for SolidityNode.
    # Turn off the index is "off", else "on".
    # Turning off the index will significantly improve the performance of the SolidityNode sync block.
    # You can turn off the index if you don't use the two interfaces getTransactionsToThis and getTransactionsFromThis.
    index.switch = "off"

    # This configuration item is used to database write strategy.
    # Synchronous writing is "true", else Asynchronous writing is "false".
    # Asynchronous writing significantly improves the performance of the FullNode sync block.
    # 1. If asynchronous, the write will be flushed from the operating system buffer cache.
    #    the machine crashes, some recent writes may be lost. Note that if it is just the process that
    #    crashes (i.e., the machine does not reboot), no writes will be lost;
    # 2. If synchronous, writes will be flush into leveldb directly.
    #     No writes will be lost when machine crashes, but it is slow.
    db.sync = false,

    # This configuration item controls the transaction result be put into transactionHistory database.
    # Turn off the switch is "off", else "on".
    # Turning off the switch, transaction result will not be put into transactionHistory database;
    # You can turn off the switch if you don't use the interface getransactioninfobyid.
    transHistory.switch = "on",


    # You can custom these 14 databases' configs:

    # account, account-index, asset-issue, block, block-index,
    # block_KDB, peers, properties, recent-block, trans,
    # utxo, votes, witness, witness_schedule.

    # Otherwise, db configs will remain defualt and data will be stored in
    # the path of "output-directory" or which is set by "-d" ("--output-directory").

    # Attention: name is a required field that must be set !!!
    properties = [
    //    {
    //      name = "account",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    {
    //      name = "account-index",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    ]

  }

    node.discovery = {
    enable = true
    persist = true
    bind.ip = ""
    external.ip = null
    }

    node.backup {
    #[needFix]改端口
    port = 10001
    priority = 8
    members = [
    ]
    }

    node {
    # trust node for solidity node
    # trustNode = "ip:port"
    #[needFix]对于solidity节点改成要同步的fullnode节点的rpc.port端口
    trustNode = "127.0.0.1:50051"

    # expose extension api to public or not
    walletExtensionApi = true
    #[needFix]改端口
    listen.port = 18888

    connection.timeout = 2

    tcpNettyWorkThreadNum = 0

    udpNettyWorkThreadNum = 1

    # Number of validate sign thread, default availableProcessors / 2
    # validateSignThreadNum = 16

    connectFactor = 0.3
    activeConnectFactor = 0.1

    maxActiveNodes = 30

    maxActiveNodesWithSameIp = 2

    minParticipationRate = 0

    maxHttpConnectNumber = 50

    # check the peer data transfer ,disconnect factor
    disconnectNumberFactor = 0.4
    maxConnectNumberFactor = 0.8
    maxHttpConnectNumber = 50
    receiveTcpMinDataLength = 2048
    isOpenFullTcpDisconnect = true

    p2p {
    #[needFix]统一
    version = 2 # 11111: mainnet; 20180622: testnet
    }

    active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
    #[needFix]改成其他节点的node.listen.port端口

  ]

    passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
    ]

    fastForward = [
    #[needFix]删
    ]

    http {
    #[needFix]改端口
    fullNodePort = 8090
    solidityPort = 8091
    }

    rpc {
    #[needFix]改端口
    port = 50051
    solidityPort = 50052
    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
    }
    blockProducedTimeOut = 50
    # number of solidity thread in the FullNode.
    # If accessing solidity rpc and http interface timeout, could increase the number of threads,
    # The default value is the number of cpu cores of the machine.
    #solidity.threads = 8
    }

  # number of solidity thread in the FullNode.
  # If accessing solidity rpc and http interface timeout, could increase the number of threads,
  # The default value is the number of cpu cores of the machine.
  #solidity.threads = 8

  # Limits the maximum percentage (default 75%) of producing block interval
  # to provide sufficient time to perform other operations e.g. broadcast block
  # blockProducedTimeOut = 75

  # Limits the maximum number (default 700) of transaction from network layer
  # netMaxTrxPerSecond = 700

  metricsEnable = true

  # open the history query APIs(http&GRPC) when node is a lite fullNode,
  # like {getBlockByNum, getBlockByID, getTransactionByID...}.
  # default: false.
  # note: above APIs may return null even if blocks and transactions actually are on the blockchain
  # when opening on a lite fullnode. only open it if the consequences being clearly known
  # openHistoryQueryWhenLiteFN = false
}

## rate limiter config
rate.limiter = {
  # Every api could be set a specific rate limit strategy. Three strategy are supported:GlobalPreemptibleAdapter、IPQPSRateLimiterAdapte、QpsRateLimiterAdapter
  # GlobalPreemptibleAdapter: permit is the number of preemptible resource, every client must apply one resourse
  #       before do the request and release the resource after got the reponse automaticlly. permit should be a Integer.
  # QpsRateLimiterAdapter: qps is the average request count in one second supported by the server, it could be a Double or a Integer.
  # IPQPSRateLimiterAdapter: similar to the QpsRateLimiterAdapter, qps could be a Double or a Integer.
  # If do not set, the "default strategy" is set.The "default startegy" is based on QpsRateLimiterAdapter, the qps is set as 10000.
  #
  # Sample entries:
  #
  http = [
    #  {
    #    component = "GetNowBlockServlet",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },

    #  {
    #    component = "GetAccountServlet",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },

    #  {
    #    component = "ListWitnessesServlet",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  }
  ],

  rpc = [
    #  {
    #    component = "protocol.Wallet/GetBlockByLatestNum2",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },

    #  {
    #    component = "protocol.Wallet/GetAccount",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },

    #  {
    #    component = "protocol.Wallet/ListWitnesses",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },
  ]


    seed.node = {
    # List of the seed nodes
    # Seed nodes are stable full nodes
    # example:
    # ip.list = [
    #   "ip:port",
    #   "ip:port"
    # ]
    ip.list = [
    #[needFix]改成其他节点的node.isten.port端口

    ]
  }

    genesis.block = {
    # Reserve balance
    assets = [
    {
    accountName = "Zion"
    accountType = "AssetIssue"
    address = "TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm"
    balance = "99000000000000000"
    },
    {
    accountName = "Sun"
    accountType = "AssetIssue"
    address = "TXmVpin5vq5gdZsciyyjdZgKRUju4st1wM"
    balance = "0"
    },
    {
    accountName = "Blackhole"
    accountType = "AssetIssue"
    address = "TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy"
    balance = "-9223372036854775808"
    },
    #[needFix]统一
    {
    accountName = "supernode1"
    accountType = "AssetIssue"
    address = "TS7gnzsbbE72tM5n6M7foLnyLRNEhyjQKm"
    balance = "1000000000000000"
    }
    ]

    witnesses = [
    #[needFix]统一
    {
      address: TS7gnzsbbE72tM5n6M7foLnyLRNEhyjQKm,
        url = "127.0.0.1",
        voteCount = 100000026
    }
  ]

    timestamp = "0" #2017-8-26 12:00:00

    parentHash = "0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f"
  }

    localwitness = [
    #[needFix]改
    71F375A1947094E8331F30C34D78A91465B6D0C59F96DC581964AD068FB1D752 # TS7gnzsbbE72tM5n6M7foLnyLRNEhyjQKm
  ]

    #localwitnesskeystore = [
    #  "localwitnesskeystore.json"
    #]

    block = {
    #[needFix]第一个节点为false，后面的节点为true
    needSyncCheck = false
    maintenanceTimeInterval = 120000  #21600000
    proposalExpireTime = 60000 # 3 day: 259200000(ms)
    checkFrozenTime = 0
  }

    # Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
    trx.reference.block = "solid" // head;solid;

    # This property sets the number of milliseconds after the creation of the transaction that is expired, default value is 60000.
    # trx.expiration.timeInMilliseconds = 60000

    vm = {
    supportConstant = true
    minTimeRatio = 0.0
    maxTimeRatio = 5.0
    saveInternalTx = false
    vmTrace = true
  }

    committee = {
    #[needFix]统一
    allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
    allowShieldedTransaction = 1 //mainnet:0 (reset by committee),test:1
    removeThePowerOfTheGr = -1
    allowSameTokenName = 1
    allowDelegateResource = 1
    allowTvmTransferTrc10 = 1
    allowMultiSign = 1
    allowTvmConstantinople = 1
    allowTvmSolidity059 = 1
    changedDelegation = 1
#    allowTvmStake = 1
#    allowTvmAssetIssue = 1
  }

    event.subscribe = {
    native = {
    useNativeQueue = false // if true, use native message queue, else use event plugin.
    bindport = 5555 // bind port
    sendqueuelength = 1000 //max length of send queue
  }

    #[needFix]改成本机
    path = "/data/sun1.5.1-main4.0/plugin/formain/plugin-kafka-1.0.0.zip" // absolute path of plugin
    #[needFix]改成本机kafka端口
    server = "10.40.100.60:18001" // target server address to receive event triggers
    dbconfig = "" // dbname|username|password
    contractParse = true,
    topics = [
    {
    triggerName = "block" // block trigger, the value can't be modified
    enable = true
    topic = "block" // plugin topic, the value could be modified
    },
    {
    triggerName = "transaction"
    enable = true
    topic = "transaction"
    },
    {
    triggerName = "contractevent"
    enable = true
    topic = "contractevent"
    },
    {
    triggerName = "contractlog"
    enable = true
    topic = "contractlog"
    },
    {
    triggerName = "solidity" // solidity block event trigger, the value can't be modified
    enable = true            // the default value is true
    topic = "solidity"
    },
    {
    triggerName = "solidityevent"
    enable = true
    topic = "solidityevent"
    },
    {
    triggerName = "soliditylog"
    enable = true
    topic = "soliditylog"
    }
  ]

    filter = {
    fromblock = "" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
    toblock = "" // the value could be "", "latest" or a specified block number as end of the queried range
    contractAddress = [
    "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
    ]

    contractTopic = [
    "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
    ]
  }

  }